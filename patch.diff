diff --git a/src/main/kotlin/com/kompbasierte/client/app/Control.kt b/src/main/kotlin/com/kompbasierte/client/app/Control.kt
index d6cf27a..08becfd 100644
--- a/src/main/kotlin/com/kompbasierte/client/app/Control.kt
+++ b/src/main/kotlin/com/kompbasierte/client/app/Control.kt
@@ -20,23 +20,35 @@ class Control constructor(mainview: MainView) {
         if (!isDatabase()) {
             println("Database not complete, recreating")
             createDatabase()
+            insertData()
         }
 //        connectToService()
     }
 
     private fun isDatabase(): Boolean {
-        //TODO better select to check
-        val sql = ("SELECT Count(*) FROM Commands")
+        if(checkTable("Befehl") && checkTable("Kategorie") && checkTable("Kategorie_Befehl")
+                && checkTable("Programm") && checkTable("Programm_Befehl")) {
+            return true
+        }
+        return false
+    }
+
+    private fun checkTable(table: String) : Boolean {
+        val sql = ("SELECT name FROM sqlite_master WHERE type='table' AND name='$table'")
         val stmt = db!!.createStatement()
         try {
             val result = stmt.executeQuery(sql)
             result.next()
-            if (result.getInt(1) == 0) {
+            if (result.getString("name") == null) {
                 return false
             }
             result.close()
+<<<<<<< HEAD
         } catch (e: SQLException) {/*
             mainView.showWarning(e.toString())*/
+=======
+        } catch (e: SQLException) {
+>>>>>>> c40c8e5e6528c5ea6bcc3b483713b30be4c763e6
             return false
         } finally {
             stmt.close()
@@ -45,14 +57,116 @@ class Control constructor(mainview: MainView) {
     }
 
     private fun createDatabase() {
-        //TODO
-        val sql = ("CREATE TABLE IF NOT EXISTS Commands (\n"
-                + "	id integer PRIMARY KEY,\n"
-                + "	active integer NOT NULL,\n"
-                + "	name text NOT NULL,\n"
-                + "	VAshoutout text NOT NULL,\n"
-                + "	shortcut text NOT NULL\n"
-                + ");")
+        val sqlList = ArrayList<String>()
+        sqlList.add("CREATE TABLE IF NOT EXISTS 'Befehl' (\n" +
+                    " 'ID'        INTEGER NOT NULL,\n" +
+                    " 'Name'      TEXT NOT NULL,\n" +
+                    " 'VACallout' TEXT NOT NULL,\n" +
+                    " 'shortcut'  TEXT NOT NULL,\n" +
+                    " 'Aktiv'     INTEGER NOT NULL,\n" +
+                    " PRIMARY KEY('ID')\n" +
+                    ");")
+
+        sqlList.add( "CREATE TABLE IF NOT EXISTS 'Kategorie' (\n" +
+                    " 'ID'   INTEGER NOT NULL,\n" +
+                    " 'Name' TEXT NOT NULL,\n" +
+                    " PRIMARY KEY('ID')\n" +
+                    ");")
+
+        sqlList.add("CREATE TABLE IF NOT EXISTS 'Kategorie_Befehl' (\n" +
+                    " 'Kategorie_ID' INTEGER NOT NULL,\n" +
+                    " 'Befehl_ID'    INTEGER NOT NULL,\n" +
+                    " PRIMARY KEY('Kategorie_ID','Befehl_ID'),\n" +
+                    " FOREIGN KEY('Kategorie_ID') REFERENCES 'Kategorie'('ID'),\n" +
+                    " FOREIGN KEY('Befehl_ID') REFERENCES 'Befehl'('ID')\n" +
+                    ");")
+
+        sqlList.add("CREATE TABLE IF NOT EXISTS 'Programm' (\n" +
+                    " 'ID'           INTEGER NOT NULL,\n" +
+                    " 'Kategorie_ID' INTEGER NOT NULL,\n" +
+                    " 'Name'         TEXT NOT NULL,\n" +
+                    " 'Pfad_32'      TEXT NOT NULL,\n" +
+                    " 'Pfad_64'      TEXT,\n" +
+                    " 'Aktiv'        INTEGER NOT NULL,\n" +
+                    " PRIMARY KEY('ID'),\n" +
+                    " FOREIGN KEY('Kategorie_ID') REFERENCES 'Kategorie'('ID')\n" +
+                    ");")
+
+        sqlList.add("CREATE TABLE IF NOT EXISTS 'Programm_Befehl' (\n" +
+                    " 'Programm_ID' INTEGER NOT NULL,\n" +
+                    " 'Befehl_ID'   INTEGER NOT NULL,\n" +
+                    " PRIMARY KEY('Programm_ID','Befehl_ID'),\n" +
+                    " FOREIGN KEY('Befehl_ID') REFERENCES 'Befehl'('ID'),\n" +
+                    " FOREIGN KEY('Programm_ID') REFERENCES 'Programm'('ID')\n" +
+                    ");")
+        for (sql: String in sqlList) {
+            execute(sql)
+        }
+    }
+
+
+
+    private  fun insertData() {
+        val sqlList = ArrayList<String>()
+        sqlList.add("INSERT INTO Kategorie (Name) VALUES ('Sonstige');")
+        sqlList.add("INSERT INTO Kategorie (Name) VALUES ('Mediaplayer');")
+        sqlList.add("INSERT INTO Kategorie (Name) VALUES ('Browser');")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (2, 'VLC', '123pfad32', 0, 1);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (2, 'Windows Media Player', '123pfad32', 0, 0);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (2, 'Spotify', '123pfad32', '123pfad64', 0);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (1, 'Paint', '123pfad32', '123pfad64', 1);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (1, 'PDF Architekt', '123pfad32', '123pfad64', 1);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (3, 'Google Chrome', 'pfad32', 'pfad64', 1);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (3, 'Mozilla Firefox', 'pfad32', 'pfad64', 1);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (3, 'Microsoft Edge', 'pfad32', 'hodor', 0);")
+        sqlList.add("INSERT INTO Programm (Kategorie_ID, Name, Pfad_32, Pfad_64, Aktiv) VALUES (1, 'Rechner', 'pfad32', 0, 0);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('NeuerTab', 'Neuer Tab öffnen', 'Strg+T', 1);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Verlauf', 'Verlauf öffnen', 'Strg+H', 0);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Drucken', 'Drucken', 'Strg+P', 1);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Suchen', 'Suchen', 'Strg+F', 1);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Lauter', 'Lauter', 'Strg+Up', 1);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Leiser', 'Leiser', 'Strg+Down', 1);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Stream', 'Stream', 'Strg+S', 0);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('test', 'test', 'Alt+1', 1);")
+        sqlList.add("INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) VALUES ('Test', 'Test', 'Strg+-', 0);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (1, 3);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (1, 4);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (1, 8);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (1, 9);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (2, 5);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (2, 6);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (3, 1);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (3, 2);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (3, 3);")
+        sqlList.add("INSERT INTO Kategorie_Befehl (Kategorie_ID, Befehl_ID) VALUES (3, 4);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (1, 5);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (1, 6);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (1, 7);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (2, 5);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (2, 6);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (3, 5);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (3, 6);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (4, 3);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (5, 3);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (5, 4);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (6, 1);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (6, 2);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (6, 3);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (6, 4);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (7, 1);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (7, 2);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (7, 3);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (7, 4);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (8, 1);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (8, 2);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (8, 3);")
+        sqlList.add("INSERT INTO Programm_Befehl (Programm_ID, Befehl_ID) VALUES (8, 4);" )
+        for (sql: String in sqlList) {
+            execute(sql)
+        }
+    }
+
+    private fun execute(sql: String) {
         val stmt = db!!.createStatement()
         try {
             stmt.execute(sql)
@@ -62,7 +176,6 @@ class Control constructor(mainview: MainView) {
         }
     }
 
-
     private fun connectToService() {
         TODO("not implemented")
     }
@@ -96,22 +209,28 @@ class Control constructor(mainview: MainView) {
         closeDatabase()
     }
 
+<<<<<<< HEAD
     fun getCommandsForApplications(programm: Application): ArrayList<Command> {
         //TODO insert correct query
         val stmt = db!!.createStatement()
         val sql = "SELECT * FROM Commands"
         val commandList = ArrayList<Command>()
+=======
+    fun getCommandsForApplications(programm: Application): ArrayList<Command>? {
+        val stmt = db!!.createStatement()
+        val sql = "SELECT * FROM Befehl JOIN Programm_Befehl ON  Programm_Befehl.Befehl_ID  = Befehl.ID JOIN Programm ON Programm_Befehl.Programm_ID = Programm.ID WHERE Programm.ID = ${programm.id};"
+>>>>>>> c40c8e5e6528c5ea6bcc3b483713b30be4c763e6
         try {
             val result = stmt!!.executeQuery(sql)
 
             while (result.isBeforeFirst)
                 result.next()
             while (!result.isAfterLast) {
-                val active: Boolean = result.getInt("active") == 1
+                val active: Boolean = result.getInt("Aktiv") == 1
                 println("Active set " + active)
-                commandList.add(Command(active, result.getString("name"),
-                        result.getString("VAshoutout"), result.getString("shortcut"),
-                        result.getInt("id")))
+                commandList.add(Command(result.getInt("ID"), result.getString("Name"),
+                        result.getString("VACallout"), result.getString("shortcut"),active
+                        ))
                 result.next()
             }
             result.close()
@@ -126,10 +245,28 @@ class Control constructor(mainview: MainView) {
 
     fun getApplications(): ArrayList<Application> {
         val appList = ArrayList<Application>()
-        //TODO Databasequery
-        appList.add(Application(true, "VLC", "123pfad"))
-        appList.add(Application(true, "Spotify", "123pfad"))
-        return appList
+        val stmt = db!!.createStatement()
+        val sql = "SELECT * FROM Programm;"
+        try {
+            val result = stmt!!.executeQuery(sql)
+
+
+            while (result.isBeforeFirst)
+                result.next()
+            while (!result.isAfterLast) {
+                val active: Boolean = result.getInt("Aktiv") == 1
+                println("Active set " + active)
+                appList.add(Application(result.getInt("ID"), result.getInt("Kategorie_ID"),
+                        result.getString("Name"),result.getString("Pfad_32"),result.getString("Pfad_64"), active))
+                result.next()
+            }
+            result.close()
+            return appList
+        } catch (e: SQLException) {
+            return appList
+        } finally {
+            stmt.close()
+        }
     }
 
     //TODO add application reference
@@ -138,8 +275,8 @@ class Control constructor(mainview: MainView) {
             1
         else
             0
-        val sql = "INSERT INTO Commands (active, name, vashoutout, shortcut) VALUES (" + active + ",\"" +
-                commandToSave.name + "\",\"" + commandToSave.vACallout + "\",\"" + commandToSave.shortcut + "\");"
+        val sql = "INSERT INTO Befehl (Name, VACallout, shortcut, Aktiv) " +
+                "VALUES ('${commandToSave.name}', '${commandToSave.vACallout}', '${commandToSave.shortcut}', '$active');"
         println(sql)
         val stmt = db!!.createStatement()
         try {
@@ -154,7 +291,7 @@ class Control constructor(mainview: MainView) {
     //TODO add app reference
     fun deleteCommandForApplication(commandToDelete: Command) {
 
-        val sql = "DELETE FROM Commands WHERE ID =" + commandToDelete.id + ";"
+        val sql = "DELETE FROM Befehl WHERE ID = '${commandToDelete.id}';"
         println(sql)
         val stmt = db!!.createStatement()
         try {
diff --git a/src/main/kotlin/com/kompbasierte/client/model/Application.kt b/src/main/kotlin/com/kompbasierte/client/model/Application.kt
index d23077b..7567e63 100644
--- a/src/main/kotlin/com/kompbasierte/client/model/Application.kt
+++ b/src/main/kotlin/com/kompbasierte/client/model/Application.kt
@@ -1,17 +1,24 @@
 package com.kompbasierte.client.model
 
 import javafx.beans.property.SimpleBooleanProperty
+import javafx.beans.property.SimpleIntegerProperty
 import javafx.beans.property.SimpleStringProperty
 import tornadofx.*
 
-class Application(active:Boolean, name:String, path:String) {
+class Application(val id:Int, category_ID:Int, name:String, path_32:String, path_64:String?, active:Boolean) {
 
-    val activeProperty = SimpleBooleanProperty(active)
-    var active by activeProperty
+    val categoryIDProperty = SimpleIntegerProperty(category_ID)
+    var category_ID by categoryIDProperty
 
     val nameProperty = SimpleStringProperty(name)
     var name by nameProperty
 
-    val pathProperty = SimpleStringProperty(path)
-    var path by pathProperty
+    val path32Property = SimpleStringProperty(path_32)
+    var path_32 by path32Property
+
+    val path64Property = SimpleStringProperty(path_64)
+    var path_64 by path64Property
+
+    val activeProperty = SimpleBooleanProperty(active)
+    var active by activeProperty
 }
\ No newline at end of file
diff --git a/src/main/kotlin/com/kompbasierte/client/model/Application_Command.kt b/src/main/kotlin/com/kompbasierte/client/model/Application_Command.kt
new file mode 100644
index 0000000..cc4911e
--- /dev/null
+++ b/src/main/kotlin/com/kompbasierte/client/model/Application_Command.kt
@@ -0,0 +1,12 @@
+package com.kompbasierte.client.model
+
+import javafx.beans.property.SimpleIntegerProperty
+import tornadofx.*
+
+class Application_Command(application_ID: Int, command_ID: Int) {
+    val applicationIDProperty = SimpleIntegerProperty(application_ID)
+    var application_ID by applicationIDProperty
+
+    val commandIDProperty = SimpleIntegerProperty(command_ID)
+    var command_ID by commandIDProperty
+}
\ No newline at end of file
diff --git a/src/main/kotlin/com/kompbasierte/client/model/Category.kt b/src/main/kotlin/com/kompbasierte/client/model/Category.kt
new file mode 100644
index 0000000..9823953
--- /dev/null
+++ b/src/main/kotlin/com/kompbasierte/client/model/Category.kt
@@ -0,0 +1,10 @@
+package com.kompbasierte.client.model
+
+import javafx.beans.property.SimpleStringProperty
+import tornadofx.*
+
+class Category(val id: Int, name: String) {
+
+    val nameProperty = SimpleStringProperty(name)
+    var name by nameProperty
+}
\ No newline at end of file
diff --git a/src/main/kotlin/com/kompbasierte/client/model/Category_Command.kt b/src/main/kotlin/com/kompbasierte/client/model/Category_Command.kt
new file mode 100644
index 0000000..734c7f3
--- /dev/null
+++ b/src/main/kotlin/com/kompbasierte/client/model/Category_Command.kt
@@ -0,0 +1,12 @@
+package com.kompbasierte.client.model
+
+import javafx.beans.property.SimpleIntegerProperty
+import tornadofx.*
+
+class Category_Command(category_ID: Int, command_ID: Int) {
+    val categoryIDProperty = SimpleIntegerProperty(category_ID)
+    var category_ID by categoryIDProperty
+
+    val commandIDProperty = SimpleIntegerProperty(command_ID)
+    var command_ID by commandIDProperty
+}
\ No newline at end of file
diff --git a/src/main/kotlin/com/kompbasierte/client/model/Command.kt b/src/main/kotlin/com/kompbasierte/client/model/Command.kt
index 760f8da..1b7fa93 100644
--- a/src/main/kotlin/com/kompbasierte/client/model/Command.kt
+++ b/src/main/kotlin/com/kompbasierte/client/model/Command.kt
@@ -4,10 +4,7 @@ import javafx.beans.property.SimpleBooleanProperty
 import javafx.beans.property.SimpleStringProperty
 import tornadofx.*
 
-class Command(active: Boolean, name: String, vACallout: String, shortcut: String, val id: Int) {
-
-    val activeProperty = SimpleBooleanProperty(active)
-    var active by activeProperty
+class Command(val id: Int, name: String, vACallout: String, shortcut: String, active: Boolean) {
 
     val nameProperty = SimpleStringProperty(name)
     var name by nameProperty
@@ -17,4 +14,7 @@ class Command(active: Boolean, name: String, vACallout: String, shortcut: String
 
     val shortcutProperty = SimpleStringProperty(shortcut)
     var shortcut by shortcutProperty
+
+    val activeProperty = SimpleBooleanProperty(active)
+    var active by activeProperty
 }
\ No newline at end of file
diff --git a/src/main/kotlin/com/kompbasierte/client/view/ApplicationsAndCommandsTableView.kt b/src/main/kotlin/com/kompbasierte/client/view/ApplicationsAndCommandsTableView.kt
index 46eeede..8b0f662 100644
--- a/src/main/kotlin/com/kompbasierte/client/view/ApplicationsAndCommandsTableView.kt
+++ b/src/main/kotlin/com/kompbasierte/client/view/ApplicationsAndCommandsTableView.kt
@@ -72,7 +72,7 @@ class ApplicationsAndCommandsTableView : View() {
                 isEditable = true
                 column("active", Command::activeProperty).useCheckbox()
                 column("Name", Command::nameProperty).useTextField()
-                column("vACallout", Command::vACalloutProperty).useTextField()
+                column("VACallout", Command::vACalloutProperty).useTextField()
                 column("shortcut", Command::shortcutProperty).useTextField()
             }
             hbox {
diff --git a/src/main/kotlin/com/kompbasierte/client/view/NewOrEditCommandView.kt b/src/main/kotlin/com/kompbasierte/client/view/NewOrEditCommandView.kt
index 92cc66e..c832adc 100644
--- a/src/main/kotlin/com/kompbasierte/client/view/NewOrEditCommandView.kt
+++ b/src/main/kotlin/com/kompbasierte/client/view/NewOrEditCommandView.kt
@@ -47,8 +47,8 @@ class NewOrEditCommandView : Fragment("New/Edit Command") {
         buttonbar {
             button("Save") {
                 action {
-                    master.saveCommandForApplication(Command(true, nameText.text, nameText.text,
-                            "" + firstComboBox.selectedItem + "+" + secondComboBox.selectedItem,0
+                    master.saveCommandForApplication(Command(0, nameText.text, nameText.text,
+                            "" + firstComboBox.selectedItem + "+" + secondComboBox.selectedItem,true
                             /*TODO implement later + "+" + thirdComboBox.selectedItem*/))
                     close()
                 }
